// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package ssapiv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServerSideApiDisconnect = "/edgehub.protocol.ssapi.v1.ServerSideApi/Disconnect"
const OperationServerSideApiPublish = "/edgehub.protocol.ssapi.v1.ServerSideApi/Publish"
const OperationServerSideApiSubscribe = "/edgehub.protocol.ssapi.v1.ServerSideApi/Subscribe"
const OperationServerSideApiSurvey = "/edgehub.protocol.ssapi.v1.ServerSideApi/Survey"
const OperationServerSideApiUnsubscribe = "/edgehub.protocol.ssapi.v1.ServerSideApi/Unsubscribe"

type ServerSideApiHTTPServer interface {
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error)
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error)
	Survey(context.Context, *SurveyRequest) (*SurveyReply, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeReply, error)
}

func RegisterServerSideApiHTTPServer(s *http.Server, srv ServerSideApiHTTPServer) {
	r := s.Route("/")
	r.POST("/api/publish/json", _ServerSideApi_Publish0_HTTP_Handler(srv))
	r.POST("/api/survey/json", _ServerSideApi_Survey0_HTTP_Handler(srv))
	r.POST("/api/subscribe/json", _ServerSideApi_Subscribe0_HTTP_Handler(srv))
	r.POST("/api/unsubscribe/json", _ServerSideApi_Unsubscribe0_HTTP_Handler(srv))
	r.POST("/api/disconnect/json", _ServerSideApi_Disconnect0_HTTP_Handler(srv))
}

func _ServerSideApi_Publish0_HTTP_Handler(srv ServerSideApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerSideApiPublish)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Publish(ctx, req.(*PublishRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishReply)
		return ctx.Result(200, reply)
	}
}

func _ServerSideApi_Survey0_HTTP_Handler(srv ServerSideApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SurveyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerSideApiSurvey)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Survey(ctx, req.(*SurveyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SurveyReply)
		return ctx.Result(200, reply)
	}
}

func _ServerSideApi_Subscribe0_HTTP_Handler(srv ServerSideApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubscribeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerSideApiSubscribe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Subscribe(ctx, req.(*SubscribeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubscribeReply)
		return ctx.Result(200, reply)
	}
}

func _ServerSideApi_Unsubscribe0_HTTP_Handler(srv ServerSideApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnsubscribeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerSideApiUnsubscribe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unsubscribe(ctx, req.(*UnsubscribeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnsubscribeReply)
		return ctx.Result(200, reply)
	}
}

func _ServerSideApi_Disconnect0_HTTP_Handler(srv ServerSideApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisconnectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerSideApiDisconnect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Disconnect(ctx, req.(*DisconnectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisconnectReply)
		return ctx.Result(200, reply)
	}
}

type ServerSideApiHTTPClient interface {
	Disconnect(ctx context.Context, req *DisconnectRequest, opts ...http.CallOption) (rsp *DisconnectReply, err error)
	Publish(ctx context.Context, req *PublishRequest, opts ...http.CallOption) (rsp *PublishReply, err error)
	Subscribe(ctx context.Context, req *SubscribeRequest, opts ...http.CallOption) (rsp *SubscribeReply, err error)
	Survey(ctx context.Context, req *SurveyRequest, opts ...http.CallOption) (rsp *SurveyReply, err error)
	Unsubscribe(ctx context.Context, req *UnsubscribeRequest, opts ...http.CallOption) (rsp *UnsubscribeReply, err error)
}

type ServerSideApiHTTPClientImpl struct {
	cc *http.Client
}

func NewServerSideApiHTTPClient(client *http.Client) ServerSideApiHTTPClient {
	return &ServerSideApiHTTPClientImpl{client}
}

func (c *ServerSideApiHTTPClientImpl) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...http.CallOption) (*DisconnectReply, error) {
	var out DisconnectReply
	pattern := "/api/disconnect/json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerSideApiDisconnect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerSideApiHTTPClientImpl) Publish(ctx context.Context, in *PublishRequest, opts ...http.CallOption) (*PublishReply, error) {
	var out PublishReply
	pattern := "/api/publish/json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerSideApiPublish))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerSideApiHTTPClientImpl) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...http.CallOption) (*SubscribeReply, error) {
	var out SubscribeReply
	pattern := "/api/subscribe/json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerSideApiSubscribe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerSideApiHTTPClientImpl) Survey(ctx context.Context, in *SurveyRequest, opts ...http.CallOption) (*SurveyReply, error) {
	var out SurveyReply
	pattern := "/api/survey/json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerSideApiSurvey))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerSideApiHTTPClientImpl) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...http.CallOption) (*UnsubscribeReply, error) {
	var out UnsubscribeReply
	pattern := "/api/unsubscribe/json"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerSideApiUnsubscribe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
