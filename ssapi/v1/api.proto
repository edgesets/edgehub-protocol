syntax = "proto3";

package edgehub.protocol.ssapi.v1;

import "shared/shared.proto";
import "google/api/annotations.proto";

option go_package = "github.com/edgesets/edgehub-protocol/ssapi/v1;ssapiv1";


service ServerSideApi {
  rpc Publish(PublishRequest) returns (PublishReply) {
    option (google.api.http) = {
      post: "/api/publish/json"
      body: "*"
    };
  }
  rpc Survey(SurveyRequest) returns (SurveyReply) {
    option (google.api.http) = {
      post: "/api/survey/json"
      body: "*"
    };
  }

  rpc Subscribe(SubscribeRequest) returns (SubscribeReply) {
    option (google.api.http) = {
      post: "/api/subscribe/json"
      body: "*"
    };
  }

  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeReply) {
    option (google.api.http) = {
      post: "/api/unsubscribe/json"
      body: "*"
    };
  }

  rpc Disconnect(DisconnectRequest) returns (DisconnectReply) {
    option (google.api.http) = {
      post: "/api/disconnect/json"
      body: "*"
    };
  }
}
message SurveyRequest {
  string id = 1;
  uint32 expect_replies = 2 [json_name = "expect_replies"]; // first, all
  uint32 timeout = 3 [json_name = "timeout"];
  string topic = 4;
  string type_id= 5;
  string content_type = 6 [json_name = "content_type"];
  string payload_text = 7 [json_name = "payload_text"];
  bytes payload_bytes = 8 [json_name = "payload_bytes"];
}

message SurveyReply {
  message Result {
    shared.Error error = 1;
    shared.Metadata metadata = 2;
    string content_type = 5 [json_name = "content_type"];
    string payload_text = 6 [json_name = "payload_text"];
    bytes payload_bytes = 7 [json_name = "payload_bytes"];
  }
  string id = 1;
  shared.Error error = 2;
  string type_id = 3;
  repeated Result results = 4;
}

message PublishRequest {
  string topic = 1 [json_name = "topic"];
  bool retain = 2;
  int32 qos = 3;
  string type_id = 4;
  string content_type = 5 [json_name = "content_type"];
  string payload_text = 6 [json_name = "payload_text"];
  bytes payload_bytes = 7 [json_name = "payload_bytes"];
}

message PublishReply {
  shared.Error error = 1;
}


message SubscribeRequest {
  string client = 1;
  string filter = 2 ;
  int32 qos = 3;
  string broker = 4;
}

message SubscribeReply {
  shared.Error error = 1;
}

message UnsubscribeRequest {
  string client = 1;
  string filter = 2 ;
  string broker = 3;
}

message UnsubscribeReply {
  shared.Error error = 1;
}

message DisconnectRequest {
  string client = 1;
  int32 code = 2;
  string reason = 3;
}

message DisconnectReply {
  shared.Error error = 1;
}